Recursion

-Recursion is more of a concept.
-Recursion refers to itself inside of the function

Stack Overflow
-when the calls within the function are too much
-basically each call of the function adds to the Stack and nothing is taken off of the Stack and it overflows.
-recursion takes up memory.

Base Case
-An added code that stops the recursion after a certain amount of calls.

3 Rules for Recursion
1. Identify the Base Case
2. Identify the Recursive Case
3. get closer and closer and return when needed. You usually have 2 returns.

Recursive vs Iterative
-Anything done recursively, can be done iteratively
-Recursion can be DRY, but makes it take longer
-good for binary trees.
Pro:
-DRY
-Readability

Con: 
-Large Stack

When to use:
-Every time you are using a tree or converting something into a tree, consider recursion.
1.Divided into a number of sub problems that are smaller instances of the same problem.
2.Each instance of the sub problem is identical in nature.
3. The solutions of each sub problem can be combined to solve the problem at hand