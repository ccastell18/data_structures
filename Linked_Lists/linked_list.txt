Linked lists

Singly and Doubly

Linked List- A set and node with two elements. Value and pointer to the next code.

-first node -head
-last node -tail
- after the tail is null

Why Linked Lists?
-Loose setting. resets information with addition or deletion.
-Traversal- like iterating an array.
-slower than array. Inserts are easier.
-no shifting or unshifting
-scatters info like hash tables, but there is more order.
-each node points to the next.

pre pend - add to beginning O(1)
append  - add to end O(1)
lookup  - O(n)
insert  - O(n)
delete  - O(n)

Pointer references another place in memory or another object or another node

Doubly Linked Lists
-has an extra piece of data that points to the value of the first one. 
-The list can be read backwards.
- can work faster, but uses more memory.

When to use Singly?
-less memory
-faster to insert or delete
-can't traverse in reverse

Why use doubly?
-more memory
-can be read both directions
