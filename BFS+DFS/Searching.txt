Linear Search
-sequentially checks elements in a list until it finds the element it is looking for or checks all elements.

Binary Search
-if data is sorted
-discards half of the list.
-finds a pivot point and checks the element. It discards the half of the list it knows the element is not included.
- repeats the process until the element is narrowed down. 
-Faster than going through each element one by one.
-similar to a binary tree.

Depth First Search(DFS)  O(n)
-Traverses one side of a binary tree. Checks each element and the child nodes. 
-If the left child node is not the element, the search moves back to the parent node and checks the right child node.
-Once it has reached the bottom of the half of the binary tree, it goes to the parent node of the tree and moves down the other side repeating the actions.
-lower memory because it doesn't keep nodes in memory like BFS.

Breadth First Search(BFS) O(n)
- Start left to right traversing each level of a binary tree until the element is found or the tree ends
- takes extra memory because it tracks the child nodes

BFS vs DFS
-Both traversals are O(n)

BFS
-Good if you know the idea of the location of the element
Pro:
Shortest Path
Closer Nodes
Con: More Memory

DFS
Pro:
Less Memory
Does Path Exist?
Con: Can Get Slow


If you know a solution is not far from the root of the tree?
BFS

If the tree is very deep and solutions are rare?
BFS(DFS will take a long time)

If the tree is very wide?
DFS(BFS will need too much memory)

If solutions are frequent but located deep in the tree?
DFS

determining whether a path exists between two nodes?
DFS- what it is built for

Finding The Shortest path?
BFS